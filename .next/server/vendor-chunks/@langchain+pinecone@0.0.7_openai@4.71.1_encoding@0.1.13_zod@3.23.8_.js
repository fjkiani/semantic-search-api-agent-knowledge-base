"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@langchain+pinecone@0.0.7_openai@4.71.1_encoding@0.1.13_zod@3.23.8_";
exports.ids = ["vendor-chunks/@langchain+pinecone@0.0.7_openai@4.71.1_encoding@0.1.13_zod@3.23.8_"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@langchain+pinecone@0.0.7_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/pinecone/dist/index.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+pinecone@0.0.7_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/pinecone/dist/index.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PineconeStore: () => (/* reexport safe */ _vectorstores_js__WEBPACK_IMPORTED_MODULE_0__.PineconeStore),\n/* harmony export */   PineconeTranslator: () => (/* reexport safe */ _translator_js__WEBPACK_IMPORTED_MODULE_1__.PineconeTranslator)\n/* harmony export */ });\n/* harmony import */ var _vectorstores_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vectorstores.js */ \"(rsc)/./node_modules/.pnpm/@langchain+pinecone@0.0.7_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/pinecone/dist/vectorstores.js\");\n/* harmony import */ var _translator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./translator.js */ \"(rsc)/./node_modules/.pnpm/@langchain+pinecone@0.0.7_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/pinecone/dist/translator.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitwaW5lY29uZUAwLjAuN19vcGVuYWlANC43MS4xX2VuY29kaW5nQDAuMS4xM196b2RAMy4yMy44Xy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9waW5lY29uZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0M7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2xlZ2FsLXNlbWFudGljLXNlYXJjaC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGFuZ2NoYWluK3BpbmVjb25lQDAuMC43X29wZW5haUA0LjcxLjFfZW5jb2RpbmdAMC4xLjEzX3pvZEAzLjIzLjhfL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL3BpbmVjb25lL2Rpc3QvaW5kZXguanM/NGQ3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi92ZWN0b3JzdG9yZXMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RyYW5zbGF0b3IuanNcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+pinecone@0.0.7_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/pinecone/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+pinecone@0.0.7_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/pinecone/dist/translator.js":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+pinecone@0.0.7_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/pinecone/dist/translator.js ***!
  \****************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PineconeTranslator: () => (/* binding */ PineconeTranslator)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_structured_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/structured_query */ \"(rsc)/./node_modules/.pnpm/@langchain+core@0.2.4_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/core/structured_query.js\");\n\n/**\n * Specialized translator class that extends the BasicTranslator. It is\n * designed to work with PineconeStore, a type of vector store in\n * LangChain. The class is initialized with a set of allowed operators and\n * comparators, which are used in the translation process to construct\n * queries and compare results.\n * @example\n * ```typescript\n * const selfQueryRetriever = SelfQueryRetriever.fromLLM({\n *   llm: new ChatOpenAI(),\n *   vectorStore: new PineconeStore(),\n *   documentContents: \"Brief summary of a movie\",\n *   attributeInfo: [],\n *   structuredQueryTranslator: new PineconeTranslator(),\n * });\n *\n * const queryResult = await selfQueryRetriever.getRelevantDocuments(\n *   \"Which movies are directed by Greta Gerwig?\",\n * );\n * ```\n */\nclass PineconeTranslator extends _langchain_core_structured_query__WEBPACK_IMPORTED_MODULE_0__.BasicTranslator {\n    constructor() {\n        super({\n            allowedOperators: [_langchain_core_structured_query__WEBPACK_IMPORTED_MODULE_0__.Operators.and, _langchain_core_structured_query__WEBPACK_IMPORTED_MODULE_0__.Operators.or],\n            allowedComparators: [\n                _langchain_core_structured_query__WEBPACK_IMPORTED_MODULE_0__.Comparators.eq,\n                _langchain_core_structured_query__WEBPACK_IMPORTED_MODULE_0__.Comparators.ne,\n                _langchain_core_structured_query__WEBPACK_IMPORTED_MODULE_0__.Comparators.gt,\n                _langchain_core_structured_query__WEBPACK_IMPORTED_MODULE_0__.Comparators.gte,\n                _langchain_core_structured_query__WEBPACK_IMPORTED_MODULE_0__.Comparators.lt,\n                _langchain_core_structured_query__WEBPACK_IMPORTED_MODULE_0__.Comparators.lte,\n            ],\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitwaW5lY29uZUAwLjAuN19vcGVuYWlANC43MS4xX2VuY29kaW5nQDAuMS4xM196b2RAMy4yMy44Xy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9waW5lY29uZS9kaXN0L3RyYW5zbGF0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEY7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxpQ0FBaUMsNkVBQWU7QUFDdkQ7QUFDQTtBQUNBLCtCQUErQix1RUFBUyxNQUFNLHVFQUFTO0FBQ3ZEO0FBQ0EsZ0JBQWdCLHlFQUFXO0FBQzNCLGdCQUFnQix5RUFBVztBQUMzQixnQkFBZ0IseUVBQVc7QUFDM0IsZ0JBQWdCLHlFQUFXO0FBQzNCLGdCQUFnQix5RUFBVztBQUMzQixnQkFBZ0IseUVBQVc7QUFDM0I7QUFDQSxTQUFTO0FBQ1Q7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xlZ2FsLXNlbWFudGljLXNlYXJjaC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGFuZ2NoYWluK3BpbmVjb25lQDAuMC43X29wZW5haUA0LjcxLjFfZW5jb2RpbmdAMC4xLjEzX3pvZEAzLjIzLjhfL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL3BpbmVjb25lL2Rpc3QvdHJhbnNsYXRvci5qcz9jMGIwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2ljVHJhbnNsYXRvciwgQ29tcGFyYXRvcnMsIE9wZXJhdG9ycywgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3N0cnVjdHVyZWRfcXVlcnlcIjtcbi8qKlxuICogU3BlY2lhbGl6ZWQgdHJhbnNsYXRvciBjbGFzcyB0aGF0IGV4dGVuZHMgdGhlIEJhc2ljVHJhbnNsYXRvci4gSXQgaXNcbiAqIGRlc2lnbmVkIHRvIHdvcmsgd2l0aCBQaW5lY29uZVN0b3JlLCBhIHR5cGUgb2YgdmVjdG9yIHN0b3JlIGluXG4gKiBMYW5nQ2hhaW4uIFRoZSBjbGFzcyBpcyBpbml0aWFsaXplZCB3aXRoIGEgc2V0IG9mIGFsbG93ZWQgb3BlcmF0b3JzIGFuZFxuICogY29tcGFyYXRvcnMsIHdoaWNoIGFyZSB1c2VkIGluIHRoZSB0cmFuc2xhdGlvbiBwcm9jZXNzIHRvIGNvbnN0cnVjdFxuICogcXVlcmllcyBhbmQgY29tcGFyZSByZXN1bHRzLlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IHNlbGZRdWVyeVJldHJpZXZlciA9IFNlbGZRdWVyeVJldHJpZXZlci5mcm9tTExNKHtcbiAqICAgbGxtOiBuZXcgQ2hhdE9wZW5BSSgpLFxuICogICB2ZWN0b3JTdG9yZTogbmV3IFBpbmVjb25lU3RvcmUoKSxcbiAqICAgZG9jdW1lbnRDb250ZW50czogXCJCcmllZiBzdW1tYXJ5IG9mIGEgbW92aWVcIixcbiAqICAgYXR0cmlidXRlSW5mbzogW10sXG4gKiAgIHN0cnVjdHVyZWRRdWVyeVRyYW5zbGF0b3I6IG5ldyBQaW5lY29uZVRyYW5zbGF0b3IoKSxcbiAqIH0pO1xuICpcbiAqIGNvbnN0IHF1ZXJ5UmVzdWx0ID0gYXdhaXQgc2VsZlF1ZXJ5UmV0cmlldmVyLmdldFJlbGV2YW50RG9jdW1lbnRzKFxuICogICBcIldoaWNoIG1vdmllcyBhcmUgZGlyZWN0ZWQgYnkgR3JldGEgR2Vyd2lnP1wiLFxuICogKTtcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgUGluZWNvbmVUcmFuc2xhdG9yIGV4dGVuZHMgQmFzaWNUcmFuc2xhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgYWxsb3dlZE9wZXJhdG9yczogW09wZXJhdG9ycy5hbmQsIE9wZXJhdG9ycy5vcl0sXG4gICAgICAgICAgICBhbGxvd2VkQ29tcGFyYXRvcnM6IFtcbiAgICAgICAgICAgICAgICBDb21wYXJhdG9ycy5lcSxcbiAgICAgICAgICAgICAgICBDb21wYXJhdG9ycy5uZSxcbiAgICAgICAgICAgICAgICBDb21wYXJhdG9ycy5ndCxcbiAgICAgICAgICAgICAgICBDb21wYXJhdG9ycy5ndGUsXG4gICAgICAgICAgICAgICAgQ29tcGFyYXRvcnMubHQsXG4gICAgICAgICAgICAgICAgQ29tcGFyYXRvcnMubHRlLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+pinecone@0.0.7_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/pinecone/dist/translator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+pinecone@0.0.7_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/pinecone/dist/vectorstores.js":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+pinecone@0.0.7_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/pinecone/dist/vectorstores.js ***!
  \******************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PineconeStore: () => (/* binding */ PineconeStore)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var flat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! flat */ \"(rsc)/./node_modules/.pnpm/flat@5.0.2/node_modules/flat/index.js\");\n/* harmony import */ var _pinecone_database_pinecone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pinecone-database/pinecone */ \"(rsc)/./node_modules/.pnpm/@pinecone-database+pinecone@2.2.1/node_modules/@pinecone-database/pinecone/dist/index.js\");\n/* harmony import */ var _langchain_core_vectorstores__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/vectorstores */ \"(rsc)/./node_modules/.pnpm/@langchain+core@0.2.4_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/core/vectorstores.js\");\n/* harmony import */ var _langchain_core_documents__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/documents */ \"(rsc)/./node_modules/.pnpm/@langchain+core@0.2.4_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/core/documents.js\");\n/* harmony import */ var _langchain_core_utils_async_caller__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @langchain/core/utils/async_caller */ \"(rsc)/./node_modules/.pnpm/@langchain+core@0.2.4_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/core/utils/async_caller.js\");\n/* harmony import */ var _langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @langchain/core/utils/chunk_array */ \"(rsc)/./node_modules/.pnpm/@langchain+core@0.2.4_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/core/utils/chunk_array.js\");\n/* harmony import */ var _langchain_core_utils_math__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @langchain/core/utils/math */ \"(rsc)/./node_modules/.pnpm/@langchain+core@0.2.4_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/core/utils/math.js\");\n\n\n\n\n\n\n\n\n/**\n * Class for managing and operating vector search applications with\n * Pinecone, the cloud-native high-scale vector database\n */\nclass PineconeStore extends _langchain_core_vectorstores__WEBPACK_IMPORTED_MODULE_2__.VectorStore {\n    _vectorstoreType() {\n        return \"pinecone\";\n    }\n    constructor(embeddings, params) {\n        super(embeddings, params);\n        Object.defineProperty(this, \"textKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"pineconeIndex\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"filter\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.embeddings = embeddings;\n        const { namespace, pineconeIndex, textKey, filter, pineconeConfig, ...asyncCallerArgs } = params;\n        this.namespace = namespace;\n        if (!pineconeIndex && !pineconeConfig) {\n            throw new Error(\"pineconeConfig or pineconeIndex must be provided.\");\n        }\n        if (pineconeIndex && pineconeConfig) {\n            throw new Error(\"Only one of pineconeConfig or pineconeIndex can be provided.\");\n        }\n        if (pineconeIndex) {\n            this.pineconeIndex = pineconeIndex;\n        }\n        else if (pineconeConfig) {\n            this.pineconeIndex = new _pinecone_database_pinecone__WEBPACK_IMPORTED_MODULE_1__.Index(pineconeConfig.indexName, {\n                ...pineconeConfig.config,\n                sourceTag: \"langchainjs\",\n            }, pineconeConfig.namespace, pineconeConfig.indexHostUrl, pineconeConfig.additionalHeaders);\n        }\n        this.textKey = textKey ?? \"text\";\n        this.filter = filter;\n        this.caller = new _langchain_core_utils_async_caller__WEBPACK_IMPORTED_MODULE_4__.AsyncCaller(asyncCallerArgs);\n    }\n    /**\n     * Method that adds documents to the Pinecone database.\n     *\n     * @param documents Array of documents to add to the Pinecone database.\n     * @param options Optional ids for the documents.\n     * @returns Promise that resolves with the ids of the added documents.\n     */\n    async addDocuments(documents, options) {\n        const texts = documents.map(({ pageContent }) => pageContent);\n        return this.addVectors(await this.embeddings.embedDocuments(texts), documents, options);\n    }\n    /**\n     * Method that adds vectors to the Pinecone database.\n     *\n     * @param vectors Array of vectors to add to the Pinecone database.\n     * @param documents Array of documents associated with the vectors.\n     * @param options Optional ids for the vectors.\n     * @returns Promise that resolves with the ids of the added vectors.\n     */\n    async addVectors(vectors, documents, options) {\n        const ids = Array.isArray(options) ? options : options?.ids;\n        const documentIds = ids == null ? documents.map(() => uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"]()) : ids;\n        const pineconeVectors = vectors.map((values, idx) => {\n            // Pinecone doesn't support nested objects, so we flatten them\n            const documentMetadata = { ...documents[idx].metadata };\n            // preserve string arrays which are allowed\n            const stringArrays = {};\n            for (const key of Object.keys(documentMetadata)) {\n                if (Array.isArray(documentMetadata[key]) &&\n                    // eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any\n                    documentMetadata[key].every((el) => typeof el === \"string\")) {\n                    stringArrays[key] = documentMetadata[key];\n                    delete documentMetadata[key];\n                }\n            }\n            const metadata = {\n                ...flat__WEBPACK_IMPORTED_MODULE_0__(documentMetadata),\n                ...stringArrays,\n                [this.textKey]: documents[idx].pageContent,\n            };\n            // Pinecone doesn't support null values, so we remove them\n            for (const key of Object.keys(metadata)) {\n                if (metadata[key] == null) {\n                    delete metadata[key];\n                }\n                else if (typeof metadata[key] === \"object\" &&\n                    Object.keys(metadata[key]).length === 0) {\n                    delete metadata[key];\n                }\n            }\n            return {\n                id: documentIds[idx],\n                metadata,\n                values,\n            };\n        });\n        const optionsNamespace = !Array.isArray(options) && options?.namespace\n            ? options.namespace\n            : this.namespace;\n        const namespace = this.pineconeIndex.namespace(optionsNamespace ?? \"\");\n        // Pinecone recommends a limit of 100 vectors per upsert request\n        const chunkSize = 100;\n        const chunkedVectors = (0,_langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_5__.chunkArray)(pineconeVectors, chunkSize);\n        const batchRequests = chunkedVectors.map((chunk) => this.caller.call(async () => namespace.upsert(chunk)));\n        await Promise.all(batchRequests);\n        return documentIds;\n    }\n    /**\n     * Method that deletes vectors from the Pinecone database.\n     * @param params Parameters for the delete operation.\n     * @returns Promise that resolves when the delete operation is complete.\n     */\n    async delete(params) {\n        const { deleteAll, ids, filter } = params;\n        const optionsNamespace = params.namespace ?? this.namespace;\n        const namespace = this.pineconeIndex.namespace(optionsNamespace ?? \"\");\n        if (deleteAll) {\n            await namespace.deleteAll();\n        }\n        else if (ids) {\n            const batchSize = 1000;\n            for (let i = 0; i < ids.length; i += batchSize) {\n                const batchIds = ids.slice(i, i + batchSize);\n                await namespace.deleteMany(batchIds);\n            }\n        }\n        else if (filter) {\n            await namespace.deleteMany(filter);\n        }\n        else {\n            throw new Error(\"Either ids or delete_all must be provided.\");\n        }\n    }\n    async _runPineconeQuery(query, k, filter, options) {\n        if (filter && this.filter) {\n            throw new Error(\"cannot provide both `filter` and `this.filter`\");\n        }\n        const _filter = filter ?? this.filter;\n        let optionsNamespace = this.namespace ?? \"\";\n        if (_filter && \"namespace\" in _filter) {\n            optionsNamespace = _filter.namespace;\n            delete _filter.namespace;\n        }\n        const namespace = this.pineconeIndex.namespace(optionsNamespace ?? \"\");\n        const results = await namespace.query({\n            includeMetadata: true,\n            topK: k,\n            vector: query,\n            filter: _filter,\n            ...options,\n        });\n        return results;\n    }\n    /**\n     * Method that performs a similarity search in the Pinecone database and\n     * returns the results along with their scores.\n     * @param query Query vector for the similarity search.\n     * @param k Number of top results to return.\n     * @param filter Optional filter to apply to the search.\n     * @returns Promise that resolves with an array of documents and their scores.\n     */\n    async similaritySearchVectorWithScore(query, k, filter) {\n        const results = await this._runPineconeQuery(query, k, filter);\n        const result = [];\n        if (results.matches) {\n            for (const res of results.matches) {\n                const { [this.textKey]: pageContent, ...metadata } = (res.metadata ??\n                    {});\n                if (res.score) {\n                    result.push([new _langchain_core_documents__WEBPACK_IMPORTED_MODULE_3__.Document({ metadata, pageContent }), res.score]);\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Return documents selected using the maximal marginal relevance.\n     * Maximal marginal relevance optimizes for similarity to the query AND diversity\n     * among selected documents.\n     *\n     * @param {string} query - Text to look up documents similar to.\n     * @param {number} options.k - Number of documents to return.\n     * @param {number} options.fetchK=20 - Number of documents to fetch before passing to the MMR algorithm.\n     * @param {number} options.lambda=0.5 - Number between 0 and 1 that determines the degree of diversity among the results,\n     *                 where 0 corresponds to maximum diversity and 1 to minimum diversity.\n     * @param {PineconeMetadata} options.filter - Optional filter to apply to the search.\n     *\n     * @returns {Promise<DocumentInterface[]>} - List of documents selected by maximal marginal relevance.\n     */\n    async maxMarginalRelevanceSearch(query, options) {\n        const queryEmbedding = await this.embeddings.embedQuery(query);\n        const results = await this._runPineconeQuery(queryEmbedding, options.fetchK ?? 20, options.filter, { includeValues: true });\n        const matches = results?.matches ?? [];\n        const embeddingList = matches.map((match) => match.values);\n        const mmrIndexes = (0,_langchain_core_utils_math__WEBPACK_IMPORTED_MODULE_6__.maximalMarginalRelevance)(queryEmbedding, embeddingList, options.lambda, options.k);\n        const topMmrMatches = mmrIndexes.map((idx) => matches[idx]);\n        const finalResult = [];\n        for (const res of topMmrMatches) {\n            const { [this.textKey]: pageContent, ...metadata } = (res.metadata ??\n                {});\n            if (res.score) {\n                finalResult.push(new _langchain_core_documents__WEBPACK_IMPORTED_MODULE_3__.Document({ metadata, pageContent }));\n            }\n        }\n        return finalResult;\n    }\n    /**\n     * Static method that creates a new instance of the PineconeStore class\n     * from texts.\n     * @param texts Array of texts to add to the Pinecone database.\n     * @param metadatas Metadata associated with the texts.\n     * @param embeddings Embeddings to use for the texts.\n     * @param dbConfig Configuration for the Pinecone database.\n     * @returns Promise that resolves with a new instance of the PineconeStore class.\n     */\n    static async fromTexts(texts, metadatas, embeddings, dbConfig) {\n        const docs = [];\n        for (let i = 0; i < texts.length; i += 1) {\n            const metadata = Array.isArray(metadatas) ? metadatas[i] : metadatas;\n            const newDoc = new _langchain_core_documents__WEBPACK_IMPORTED_MODULE_3__.Document({\n                pageContent: texts[i],\n                metadata,\n            });\n            docs.push(newDoc);\n        }\n        const args = {\n            pineconeIndex: dbConfig.pineconeIndex,\n            textKey: dbConfig.textKey,\n            namespace: dbConfig.namespace,\n        };\n        return PineconeStore.fromDocuments(docs, embeddings, args);\n    }\n    /**\n     * Static method that creates a new instance of the PineconeStore class\n     * from documents.\n     * @param docs Array of documents to add to the Pinecone database.\n     * @param embeddings Embeddings to use for the documents.\n     * @param dbConfig Configuration for the Pinecone database.\n     * @returns Promise that resolves with a new instance of the PineconeStore class.\n     */\n    static async fromDocuments(docs, embeddings, dbConfig) {\n        const args = dbConfig;\n        args.textKey = dbConfig.textKey ?? \"text\";\n        const instance = new this(embeddings, args);\n        await instance.addDocuments(docs);\n        return instance;\n    }\n    /**\n     * Static method that creates a new instance of the PineconeStore class\n     * from an existing index.\n     * @param embeddings Embeddings to use for the documents.\n     * @param dbConfig Configuration for the Pinecone database.\n     * @returns Promise that resolves with a new instance of the PineconeStore class.\n     */\n    static async fromExistingIndex(embeddings, dbConfig) {\n        const instance = new this(embeddings, dbConfig);\n        return instance;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitwaW5lY29uZUAwLjAuN19vcGVuYWlANC43MS4xX2VuY29kaW5nQDAuMS4xM196b2RAMy4yMy44Xy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9waW5lY29uZS9kaXN0L3ZlY3RvcnN0b3Jlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBNkI7QUFDRjtBQUMyQztBQUNWO0FBQ1A7QUFDYTtBQUNIO0FBQ087QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDTyw0QkFBNEIscUVBQVc7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLGdCQUFnQixnRkFBZ0Y7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyw4REFBYTtBQUNsRDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiwyRUFBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsYUFBYTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsNENBQU87QUFDckU7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlDQUFPO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsNkVBQVU7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IseUJBQXlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGdCQUFnQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMkNBQTJDO0FBQ25FLHNCQUFzQjtBQUN0QjtBQUNBLHFDQUFxQywrREFBUSxHQUFHLHVCQUF1QjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGVBQWUsa0JBQWtCO0FBQ2pDO0FBQ0EsaUJBQWlCLDhCQUE4QjtBQUMvQztBQUNBO0FBQ0E7QUFDQSw2R0FBNkcscUJBQXFCO0FBQ2xJO0FBQ0E7QUFDQSwyQkFBMkIsb0ZBQXdCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwyQ0FBMkM7QUFDL0Qsa0JBQWtCO0FBQ2xCO0FBQ0EscUNBQXFDLCtEQUFRLEdBQUcsdUJBQXVCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQSwrQkFBK0IsK0RBQVE7QUFDdkM7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZWdhbC1zZW1hbnRpYy1zZWFyY2gvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitwaW5lY29uZUAwLjAuN19vcGVuYWlANC43MS4xX2VuY29kaW5nQDAuMS4xM196b2RAMy4yMy44Xy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9waW5lY29uZS9kaXN0L3ZlY3RvcnN0b3Jlcy5qcz9kMWNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHV1aWQgZnJvbSBcInV1aWRcIjtcbmltcG9ydCBmbGF0dGVuIGZyb20gXCJmbGF0XCI7XG5pbXBvcnQgeyBJbmRleCBhcyBQaW5lY29uZUluZGV4LCB9IGZyb20gXCJAcGluZWNvbmUtZGF0YWJhc2UvcGluZWNvbmVcIjtcbmltcG9ydCB7IFZlY3RvclN0b3JlLCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvdmVjdG9yc3RvcmVzXCI7XG5pbXBvcnQgeyBEb2N1bWVudCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvZG9jdW1lbnRzXCI7XG5pbXBvcnQgeyBBc3luY0NhbGxlciwgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2FzeW5jX2NhbGxlclwiO1xuaW1wb3J0IHsgY2h1bmtBcnJheSB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvdXRpbHMvY2h1bmtfYXJyYXlcIjtcbmltcG9ydCB7IG1heGltYWxNYXJnaW5hbFJlbGV2YW5jZSB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvdXRpbHMvbWF0aFwiO1xuLyoqXG4gKiBDbGFzcyBmb3IgbWFuYWdpbmcgYW5kIG9wZXJhdGluZyB2ZWN0b3Igc2VhcmNoIGFwcGxpY2F0aW9ucyB3aXRoXG4gKiBQaW5lY29uZSwgdGhlIGNsb3VkLW5hdGl2ZSBoaWdoLXNjYWxlIHZlY3RvciBkYXRhYmFzZVxuICovXG5leHBvcnQgY2xhc3MgUGluZWNvbmVTdG9yZSBleHRlbmRzIFZlY3RvclN0b3JlIHtcbiAgICBfdmVjdG9yc3RvcmVUeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJwaW5lY29uZVwiO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihlbWJlZGRpbmdzLCBwYXJhbXMpIHtcbiAgICAgICAgc3VwZXIoZW1iZWRkaW5ncywgcGFyYW1zKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidGV4dEtleVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lc3BhY2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicGluZWNvbmVJbmRleFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJmaWx0ZXJcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY2FsbGVyXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZW1iZWRkaW5ncyA9IGVtYmVkZGluZ3M7XG4gICAgICAgIGNvbnN0IHsgbmFtZXNwYWNlLCBwaW5lY29uZUluZGV4LCB0ZXh0S2V5LCBmaWx0ZXIsIHBpbmVjb25lQ29uZmlnLCAuLi5hc3luY0NhbGxlckFyZ3MgfSA9IHBhcmFtcztcbiAgICAgICAgdGhpcy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gICAgICAgIGlmICghcGluZWNvbmVJbmRleCAmJiAhcGluZWNvbmVDb25maWcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInBpbmVjb25lQ29uZmlnIG9yIHBpbmVjb25lSW5kZXggbXVzdCBiZSBwcm92aWRlZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBpbmVjb25lSW5kZXggJiYgcGluZWNvbmVDb25maWcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9ubHkgb25lIG9mIHBpbmVjb25lQ29uZmlnIG9yIHBpbmVjb25lSW5kZXggY2FuIGJlIHByb3ZpZGVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGluZWNvbmVJbmRleCkge1xuICAgICAgICAgICAgdGhpcy5waW5lY29uZUluZGV4ID0gcGluZWNvbmVJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwaW5lY29uZUNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy5waW5lY29uZUluZGV4ID0gbmV3IFBpbmVjb25lSW5kZXgocGluZWNvbmVDb25maWcuaW5kZXhOYW1lLCB7XG4gICAgICAgICAgICAgICAgLi4ucGluZWNvbmVDb25maWcuY29uZmlnLFxuICAgICAgICAgICAgICAgIHNvdXJjZVRhZzogXCJsYW5nY2hhaW5qc1wiLFxuICAgICAgICAgICAgfSwgcGluZWNvbmVDb25maWcubmFtZXNwYWNlLCBwaW5lY29uZUNvbmZpZy5pbmRleEhvc3RVcmwsIHBpbmVjb25lQ29uZmlnLmFkZGl0aW9uYWxIZWFkZXJzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRleHRLZXkgPSB0ZXh0S2V5ID8/IFwidGV4dFwiO1xuICAgICAgICB0aGlzLmZpbHRlciA9IGZpbHRlcjtcbiAgICAgICAgdGhpcy5jYWxsZXIgPSBuZXcgQXN5bmNDYWxsZXIoYXN5bmNDYWxsZXJBcmdzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRoYXQgYWRkcyBkb2N1bWVudHMgdG8gdGhlIFBpbmVjb25lIGRhdGFiYXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRvY3VtZW50cyBBcnJheSBvZiBkb2N1bWVudHMgdG8gYWRkIHRvIHRoZSBQaW5lY29uZSBkYXRhYmFzZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBpZHMgZm9yIHRoZSBkb2N1bWVudHMuXG4gICAgICogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGlkcyBvZiB0aGUgYWRkZWQgZG9jdW1lbnRzLlxuICAgICAqL1xuICAgIGFzeW5jIGFkZERvY3VtZW50cyhkb2N1bWVudHMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdGV4dHMgPSBkb2N1bWVudHMubWFwKCh7IHBhZ2VDb250ZW50IH0pID0+IHBhZ2VDb250ZW50KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkVmVjdG9ycyhhd2FpdCB0aGlzLmVtYmVkZGluZ3MuZW1iZWREb2N1bWVudHModGV4dHMpLCBkb2N1bWVudHMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdGhhdCBhZGRzIHZlY3RvcnMgdG8gdGhlIFBpbmVjb25lIGRhdGFiYXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZlY3RvcnMgQXJyYXkgb2YgdmVjdG9ycyB0byBhZGQgdG8gdGhlIFBpbmVjb25lIGRhdGFiYXNlLlxuICAgICAqIEBwYXJhbSBkb2N1bWVudHMgQXJyYXkgb2YgZG9jdW1lbnRzIGFzc29jaWF0ZWQgd2l0aCB0aGUgdmVjdG9ycy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBpZHMgZm9yIHRoZSB2ZWN0b3JzLlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBpZHMgb2YgdGhlIGFkZGVkIHZlY3RvcnMuXG4gICAgICovXG4gICAgYXN5bmMgYWRkVmVjdG9ycyh2ZWN0b3JzLCBkb2N1bWVudHMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgaWRzID0gQXJyYXkuaXNBcnJheShvcHRpb25zKSA/IG9wdGlvbnMgOiBvcHRpb25zPy5pZHM7XG4gICAgICAgIGNvbnN0IGRvY3VtZW50SWRzID0gaWRzID09IG51bGwgPyBkb2N1bWVudHMubWFwKCgpID0+IHV1aWQudjQoKSkgOiBpZHM7XG4gICAgICAgIGNvbnN0IHBpbmVjb25lVmVjdG9ycyA9IHZlY3RvcnMubWFwKCh2YWx1ZXMsIGlkeCkgPT4ge1xuICAgICAgICAgICAgLy8gUGluZWNvbmUgZG9lc24ndCBzdXBwb3J0IG5lc3RlZCBvYmplY3RzLCBzbyB3ZSBmbGF0dGVuIHRoZW1cbiAgICAgICAgICAgIGNvbnN0IGRvY3VtZW50TWV0YWRhdGEgPSB7IC4uLmRvY3VtZW50c1tpZHhdLm1ldGFkYXRhIH07XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBzdHJpbmcgYXJyYXlzIHdoaWNoIGFyZSBhbGxvd2VkXG4gICAgICAgICAgICBjb25zdCBzdHJpbmdBcnJheXMgPSB7fTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGRvY3VtZW50TWV0YWRhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZG9jdW1lbnRNZXRhZGF0YVtrZXldKSAmJlxuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudE1ldGFkYXRhW2tleV0uZXZlcnkoKGVsKSA9PiB0eXBlb2YgZWwgPT09IFwic3RyaW5nXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ0FycmF5c1trZXldID0gZG9jdW1lbnRNZXRhZGF0YVtrZXldO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZG9jdW1lbnRNZXRhZGF0YVtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0ge1xuICAgICAgICAgICAgICAgIC4uLmZsYXR0ZW4oZG9jdW1lbnRNZXRhZGF0YSksXG4gICAgICAgICAgICAgICAgLi4uc3RyaW5nQXJyYXlzLFxuICAgICAgICAgICAgICAgIFt0aGlzLnRleHRLZXldOiBkb2N1bWVudHNbaWR4XS5wYWdlQ29udGVudCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBQaW5lY29uZSBkb2Vzbid0IHN1cHBvcnQgbnVsbCB2YWx1ZXMsIHNvIHdlIHJlbW92ZSB0aGVtXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhtZXRhZGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAobWV0YWRhdGFba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtZXRhZGF0YVtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgbWV0YWRhdGFba2V5XSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhtZXRhZGF0YVtrZXldKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1ldGFkYXRhW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpZDogZG9jdW1lbnRJZHNbaWR4XSxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAgICAgICAgICB2YWx1ZXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgb3B0aW9uc05hbWVzcGFjZSA9ICFBcnJheS5pc0FycmF5KG9wdGlvbnMpICYmIG9wdGlvbnM/Lm5hbWVzcGFjZVxuICAgICAgICAgICAgPyBvcHRpb25zLm5hbWVzcGFjZVxuICAgICAgICAgICAgOiB0aGlzLm5hbWVzcGFjZTtcbiAgICAgICAgY29uc3QgbmFtZXNwYWNlID0gdGhpcy5waW5lY29uZUluZGV4Lm5hbWVzcGFjZShvcHRpb25zTmFtZXNwYWNlID8/IFwiXCIpO1xuICAgICAgICAvLyBQaW5lY29uZSByZWNvbW1lbmRzIGEgbGltaXQgb2YgMTAwIHZlY3RvcnMgcGVyIHVwc2VydCByZXF1ZXN0XG4gICAgICAgIGNvbnN0IGNodW5rU2l6ZSA9IDEwMDtcbiAgICAgICAgY29uc3QgY2h1bmtlZFZlY3RvcnMgPSBjaHVua0FycmF5KHBpbmVjb25lVmVjdG9ycywgY2h1bmtTaXplKTtcbiAgICAgICAgY29uc3QgYmF0Y2hSZXF1ZXN0cyA9IGNodW5rZWRWZWN0b3JzLm1hcCgoY2h1bmspID0+IHRoaXMuY2FsbGVyLmNhbGwoYXN5bmMgKCkgPT4gbmFtZXNwYWNlLnVwc2VydChjaHVuaykpKTtcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoYmF0Y2hSZXF1ZXN0cyk7XG4gICAgICAgIHJldHVybiBkb2N1bWVudElkcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRoYXQgZGVsZXRlcyB2ZWN0b3JzIGZyb20gdGhlIFBpbmVjb25lIGRhdGFiYXNlLlxuICAgICAqIEBwYXJhbSBwYXJhbXMgUGFyYW1ldGVycyBmb3IgdGhlIGRlbGV0ZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGRlbGV0ZSBvcGVyYXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgYXN5bmMgZGVsZXRlKHBhcmFtcykge1xuICAgICAgICBjb25zdCB7IGRlbGV0ZUFsbCwgaWRzLCBmaWx0ZXIgfSA9IHBhcmFtcztcbiAgICAgICAgY29uc3Qgb3B0aW9uc05hbWVzcGFjZSA9IHBhcmFtcy5uYW1lc3BhY2UgPz8gdGhpcy5uYW1lc3BhY2U7XG4gICAgICAgIGNvbnN0IG5hbWVzcGFjZSA9IHRoaXMucGluZWNvbmVJbmRleC5uYW1lc3BhY2Uob3B0aW9uc05hbWVzcGFjZSA/PyBcIlwiKTtcbiAgICAgICAgaWYgKGRlbGV0ZUFsbCkge1xuICAgICAgICAgICAgYXdhaXQgbmFtZXNwYWNlLmRlbGV0ZUFsbCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlkcykge1xuICAgICAgICAgICAgY29uc3QgYmF0Y2hTaXplID0gMTAwMDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSArPSBiYXRjaFNpemUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiYXRjaElkcyA9IGlkcy5zbGljZShpLCBpICsgYmF0Y2hTaXplKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBuYW1lc3BhY2UuZGVsZXRlTWFueShiYXRjaElkcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZmlsdGVyKSB7XG4gICAgICAgICAgICBhd2FpdCBuYW1lc3BhY2UuZGVsZXRlTWFueShmaWx0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRWl0aGVyIGlkcyBvciBkZWxldGVfYWxsIG11c3QgYmUgcHJvdmlkZWQuXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9ydW5QaW5lY29uZVF1ZXJ5KHF1ZXJ5LCBrLCBmaWx0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGZpbHRlciAmJiB0aGlzLmZpbHRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2Fubm90IHByb3ZpZGUgYm90aCBgZmlsdGVyYCBhbmQgYHRoaXMuZmlsdGVyYFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfZmlsdGVyID0gZmlsdGVyID8/IHRoaXMuZmlsdGVyO1xuICAgICAgICBsZXQgb3B0aW9uc05hbWVzcGFjZSA9IHRoaXMubmFtZXNwYWNlID8/IFwiXCI7XG4gICAgICAgIGlmIChfZmlsdGVyICYmIFwibmFtZXNwYWNlXCIgaW4gX2ZpbHRlcikge1xuICAgICAgICAgICAgb3B0aW9uc05hbWVzcGFjZSA9IF9maWx0ZXIubmFtZXNwYWNlO1xuICAgICAgICAgICAgZGVsZXRlIF9maWx0ZXIubmFtZXNwYWNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5hbWVzcGFjZSA9IHRoaXMucGluZWNvbmVJbmRleC5uYW1lc3BhY2Uob3B0aW9uc05hbWVzcGFjZSA/PyBcIlwiKTtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IG5hbWVzcGFjZS5xdWVyeSh7XG4gICAgICAgICAgICBpbmNsdWRlTWV0YWRhdGE6IHRydWUsXG4gICAgICAgICAgICB0b3BLOiBrLFxuICAgICAgICAgICAgdmVjdG9yOiBxdWVyeSxcbiAgICAgICAgICAgIGZpbHRlcjogX2ZpbHRlcixcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRoYXQgcGVyZm9ybXMgYSBzaW1pbGFyaXR5IHNlYXJjaCBpbiB0aGUgUGluZWNvbmUgZGF0YWJhc2UgYW5kXG4gICAgICogcmV0dXJucyB0aGUgcmVzdWx0cyBhbG9uZyB3aXRoIHRoZWlyIHNjb3Jlcy5cbiAgICAgKiBAcGFyYW0gcXVlcnkgUXVlcnkgdmVjdG9yIGZvciB0aGUgc2ltaWxhcml0eSBzZWFyY2guXG4gICAgICogQHBhcmFtIGsgTnVtYmVyIG9mIHRvcCByZXN1bHRzIHRvIHJldHVybi5cbiAgICAgKiBAcGFyYW0gZmlsdGVyIE9wdGlvbmFsIGZpbHRlciB0byBhcHBseSB0byB0aGUgc2VhcmNoLlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGFuIGFycmF5IG9mIGRvY3VtZW50cyBhbmQgdGhlaXIgc2NvcmVzLlxuICAgICAqL1xuICAgIGFzeW5jIHNpbWlsYXJpdHlTZWFyY2hWZWN0b3JXaXRoU2NvcmUocXVlcnksIGssIGZpbHRlcikge1xuICAgICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgdGhpcy5fcnVuUGluZWNvbmVRdWVyeShxdWVyeSwgaywgZmlsdGVyKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGlmIChyZXN1bHRzLm1hdGNoZXMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVzIG9mIHJlc3VsdHMubWF0Y2hlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgW3RoaXMudGV4dEtleV06IHBhZ2VDb250ZW50LCAuLi5tZXRhZGF0YSB9ID0gKHJlcy5tZXRhZGF0YSA/P1xuICAgICAgICAgICAgICAgICAgICB7fSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy5zY29yZSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChbbmV3IERvY3VtZW50KHsgbWV0YWRhdGEsIHBhZ2VDb250ZW50IH0pLCByZXMuc2NvcmVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGRvY3VtZW50cyBzZWxlY3RlZCB1c2luZyB0aGUgbWF4aW1hbCBtYXJnaW5hbCByZWxldmFuY2UuXG4gICAgICogTWF4aW1hbCBtYXJnaW5hbCByZWxldmFuY2Ugb3B0aW1pemVzIGZvciBzaW1pbGFyaXR5IHRvIHRoZSBxdWVyeSBBTkQgZGl2ZXJzaXR5XG4gICAgICogYW1vbmcgc2VsZWN0ZWQgZG9jdW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IC0gVGV4dCB0byBsb29rIHVwIGRvY3VtZW50cyBzaW1pbGFyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLmsgLSBOdW1iZXIgb2YgZG9jdW1lbnRzIHRvIHJldHVybi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5mZXRjaEs9MjAgLSBOdW1iZXIgb2YgZG9jdW1lbnRzIHRvIGZldGNoIGJlZm9yZSBwYXNzaW5nIHRvIHRoZSBNTVIgYWxnb3JpdGhtLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLmxhbWJkYT0wLjUgLSBOdW1iZXIgYmV0d2VlbiAwIGFuZCAxIHRoYXQgZGV0ZXJtaW5lcyB0aGUgZGVncmVlIG9mIGRpdmVyc2l0eSBhbW9uZyB0aGUgcmVzdWx0cyxcbiAgICAgKiAgICAgICAgICAgICAgICAgd2hlcmUgMCBjb3JyZXNwb25kcyB0byBtYXhpbXVtIGRpdmVyc2l0eSBhbmQgMSB0byBtaW5pbXVtIGRpdmVyc2l0eS5cbiAgICAgKiBAcGFyYW0ge1BpbmVjb25lTWV0YWRhdGF9IG9wdGlvbnMuZmlsdGVyIC0gT3B0aW9uYWwgZmlsdGVyIHRvIGFwcGx5IHRvIHRoZSBzZWFyY2guXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEb2N1bWVudEludGVyZmFjZVtdPn0gLSBMaXN0IG9mIGRvY3VtZW50cyBzZWxlY3RlZCBieSBtYXhpbWFsIG1hcmdpbmFsIHJlbGV2YW5jZS5cbiAgICAgKi9cbiAgICBhc3luYyBtYXhNYXJnaW5hbFJlbGV2YW5jZVNlYXJjaChxdWVyeSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBxdWVyeUVtYmVkZGluZyA9IGF3YWl0IHRoaXMuZW1iZWRkaW5ncy5lbWJlZFF1ZXJ5KHF1ZXJ5KTtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHRoaXMuX3J1blBpbmVjb25lUXVlcnkocXVlcnlFbWJlZGRpbmcsIG9wdGlvbnMuZmV0Y2hLID8/IDIwLCBvcHRpb25zLmZpbHRlciwgeyBpbmNsdWRlVmFsdWVzOiB0cnVlIH0pO1xuICAgICAgICBjb25zdCBtYXRjaGVzID0gcmVzdWx0cz8ubWF0Y2hlcyA/PyBbXTtcbiAgICAgICAgY29uc3QgZW1iZWRkaW5nTGlzdCA9IG1hdGNoZXMubWFwKChtYXRjaCkgPT4gbWF0Y2gudmFsdWVzKTtcbiAgICAgICAgY29uc3QgbW1ySW5kZXhlcyA9IG1heGltYWxNYXJnaW5hbFJlbGV2YW5jZShxdWVyeUVtYmVkZGluZywgZW1iZWRkaW5nTGlzdCwgb3B0aW9ucy5sYW1iZGEsIG9wdGlvbnMuayk7XG4gICAgICAgIGNvbnN0IHRvcE1tck1hdGNoZXMgPSBtbXJJbmRleGVzLm1hcCgoaWR4KSA9PiBtYXRjaGVzW2lkeF0pO1xuICAgICAgICBjb25zdCBmaW5hbFJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHJlcyBvZiB0b3BNbXJNYXRjaGVzKSB7XG4gICAgICAgICAgICBjb25zdCB7IFt0aGlzLnRleHRLZXldOiBwYWdlQ29udGVudCwgLi4ubWV0YWRhdGEgfSA9IChyZXMubWV0YWRhdGEgPz9cbiAgICAgICAgICAgICAgICB7fSk7XG4gICAgICAgICAgICBpZiAocmVzLnNjb3JlKSB7XG4gICAgICAgICAgICAgICAgZmluYWxSZXN1bHQucHVzaChuZXcgRG9jdW1lbnQoeyBtZXRhZGF0YSwgcGFnZUNvbnRlbnQgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaW5hbFJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhdGljIG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIFBpbmVjb25lU3RvcmUgY2xhc3NcbiAgICAgKiBmcm9tIHRleHRzLlxuICAgICAqIEBwYXJhbSB0ZXh0cyBBcnJheSBvZiB0ZXh0cyB0byBhZGQgdG8gdGhlIFBpbmVjb25lIGRhdGFiYXNlLlxuICAgICAqIEBwYXJhbSBtZXRhZGF0YXMgTWV0YWRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSB0ZXh0cy5cbiAgICAgKiBAcGFyYW0gZW1iZWRkaW5ncyBFbWJlZGRpbmdzIHRvIHVzZSBmb3IgdGhlIHRleHRzLlxuICAgICAqIEBwYXJhbSBkYkNvbmZpZyBDb25maWd1cmF0aW9uIGZvciB0aGUgUGluZWNvbmUgZGF0YWJhc2UuXG4gICAgICogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIFBpbmVjb25lU3RvcmUgY2xhc3MuXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGZyb21UZXh0cyh0ZXh0cywgbWV0YWRhdGFzLCBlbWJlZGRpbmdzLCBkYkNvbmZpZykge1xuICAgICAgICBjb25zdCBkb2NzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gQXJyYXkuaXNBcnJheShtZXRhZGF0YXMpID8gbWV0YWRhdGFzW2ldIDogbWV0YWRhdGFzO1xuICAgICAgICAgICAgY29uc3QgbmV3RG9jID0gbmV3IERvY3VtZW50KHtcbiAgICAgICAgICAgICAgICBwYWdlQ29udGVudDogdGV4dHNbaV0sXG4gICAgICAgICAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRvY3MucHVzaChuZXdEb2MpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgICAgICBwaW5lY29uZUluZGV4OiBkYkNvbmZpZy5waW5lY29uZUluZGV4LFxuICAgICAgICAgICAgdGV4dEtleTogZGJDb25maWcudGV4dEtleSxcbiAgICAgICAgICAgIG5hbWVzcGFjZTogZGJDb25maWcubmFtZXNwYWNlLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gUGluZWNvbmVTdG9yZS5mcm9tRG9jdW1lbnRzKGRvY3MsIGVtYmVkZGluZ3MsIGFyZ3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGF0aWMgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgUGluZWNvbmVTdG9yZSBjbGFzc1xuICAgICAqIGZyb20gZG9jdW1lbnRzLlxuICAgICAqIEBwYXJhbSBkb2NzIEFycmF5IG9mIGRvY3VtZW50cyB0byBhZGQgdG8gdGhlIFBpbmVjb25lIGRhdGFiYXNlLlxuICAgICAqIEBwYXJhbSBlbWJlZGRpbmdzIEVtYmVkZGluZ3MgdG8gdXNlIGZvciB0aGUgZG9jdW1lbnRzLlxuICAgICAqIEBwYXJhbSBkYkNvbmZpZyBDb25maWd1cmF0aW9uIGZvciB0aGUgUGluZWNvbmUgZGF0YWJhc2UuXG4gICAgICogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIFBpbmVjb25lU3RvcmUgY2xhc3MuXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGZyb21Eb2N1bWVudHMoZG9jcywgZW1iZWRkaW5ncywgZGJDb25maWcpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IGRiQ29uZmlnO1xuICAgICAgICBhcmdzLnRleHRLZXkgPSBkYkNvbmZpZy50ZXh0S2V5ID8/IFwidGV4dFwiO1xuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyB0aGlzKGVtYmVkZGluZ3MsIGFyZ3MpO1xuICAgICAgICBhd2FpdCBpbnN0YW5jZS5hZGREb2N1bWVudHMoZG9jcyk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhdGljIG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIFBpbmVjb25lU3RvcmUgY2xhc3NcbiAgICAgKiBmcm9tIGFuIGV4aXN0aW5nIGluZGV4LlxuICAgICAqIEBwYXJhbSBlbWJlZGRpbmdzIEVtYmVkZGluZ3MgdG8gdXNlIGZvciB0aGUgZG9jdW1lbnRzLlxuICAgICAqIEBwYXJhbSBkYkNvbmZpZyBDb25maWd1cmF0aW9uIGZvciB0aGUgUGluZWNvbmUgZGF0YWJhc2UuXG4gICAgICogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIFBpbmVjb25lU3RvcmUgY2xhc3MuXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGZyb21FeGlzdGluZ0luZGV4KGVtYmVkZGluZ3MsIGRiQ29uZmlnKSB7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gbmV3IHRoaXMoZW1iZWRkaW5ncywgZGJDb25maWcpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+pinecone@0.0.7_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/pinecone/dist/vectorstores.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+pinecone@0.0.7_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/pinecone/index.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+pinecone@0.0.7_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/pinecone/index.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PineconeStore: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.PineconeStore),
/* harmony export */   PineconeTranslator: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.PineconeTranslator)
/* harmony export */ });
/* harmony import */ var _dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/index.js */ "(rsc)/./node_modules/.pnpm/@langchain+pinecone@0.0.7_openai@4.71.1_encoding@0.1.13_zod@3.23.8_/node_modules/@langchain/pinecone/dist/index.js");


/***/ })

};
;